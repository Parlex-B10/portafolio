import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from streamlit_option_menu import option_menu
from PIL import Image
import pdfplumber
import tempfile
from streamlit_star_rating import st_star_rating
import tempfile
import snowflake.connector


# Configuraci√≥n de conexi√≥n a Snowflake
def create_connection():
    conn = snowflake.connector.connect(
        user='ALEXPAREDES',
        password='Prueba12',
        account='siuhmcn-mo37359',
        database='PORTAFOLIO',
        schema='Alex'
    )
    return conn

# Crear tabla de feedback si no existe
def create_feedback_table():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            IDR NUMBER AUTOINCREMENT,
            NOMBRE STRING,
            CORREO STRING,
            COMENTARIO STRING,
            CALIFICACION NUMBER
        )
    """)
    cursor.close()
    conn.close()

# Llamar a la funci√≥n para asegurarse de que la tabla est√° creada
create_feedback_table()




st.set_page_config(page_title="Alejandro Paredes", page_icon=":bar_chart:", layout="wide")
hide_st_style = """
<style>
#MainMenu {
  visibility: hidden;
  }
footer {
  visibility: hidden;
  }
header {
  visibility: hidden;
}
</style>
"""

st.markdown(hide_st_style, unsafe_allow_html=True)

@st.cache_data
@st.cache_resource

def get_data():
  df = pd.read_csv('DataBase League of Legends - BD Limpia.csv')
  return df

df = get_data()
sm = st.radio("Selecciona idioma/Select language",('Espa√±ol','English'))
if sm=='Espa√±ol':
    selected = option_menu(None, ["Sobre Mi","Portafolio" ,"Dashboard","Reporte", "Feedback", "Referencias"],
        icons=["person-vcard", "folder-fill", 'pie-chart-fill','clipboard-data-fill', 'chat-square-heart-fill', 'database-fill'],
        menu_icon="cast", default_index=0, orientation="horizontal")
    
    # Referencias
    if selected == "Referencias":
      st.markdown('<p class="font">Referencias üìë</p>', unsafe_allow_html=True)
    
      url_Streaming = "https://www.kaggle.com/datasets/barthetur/league-of-legends-2024-competitive-game-dataset/data"
      st.write(f'''Para este trabajo se utiliz√≥ las bases de datos de kagle:
      - [Conjunto de datos de Streaming]( {url_Streaming} )
      ''')
      st.markdown('________________________')
    
    # Portafolio
    if selected == "Portafolio":
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
    
      st.markdown('<p class="font">Portafolio üóÇÔ∏è</p>', unsafe_allow_html=True)
    
      st.markdown('________________________')
      opt = st.radio("Selecciona variable",('Proyectos','Certificaciones/Reconocimientos'))
      if opt == 'Proyectos':
        st.markdown('________________________')
    
        st.sidebar.markdown('''
          # Secciones
          - [Proyectos Destacados](#proyectos-destacados)
          - [Experiencias](#experiencias)
          - [Otros Proyectos](#otros-proyectos)
            - [Project manager](#project-manager)
            - [Diseno y Creacion del Expediente Medico](#diseno-y-creacion-del-expediente-medico)
            - [Actividades economicas de amazon](#actividades-economicas-de-amazon)
            - [Ciencia de datos](#ciencia-de-datos)
            - [Proyecto integrador TC1030](#proyecto-integrador-tc1030)
            - [Reto iot](#reto-iot)
            - [Soluciona un problema automotriz](#soluciona-un-problema-automotriz)
          ''', unsafe_allow_html=True)
    
        st.header('Proyectos Destacados')
        st.markdown('________________________')
    
        col1, col2, col3 = st.columns([1, 1,1])
    
    
        with col1:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>TecStore An√°lisis de Datos </p>''', unsafe_allow_html=True)
          st.write('''
          -Limpieza y correcci√≥n de datos en SQL \n
          -Dise√±o de un Datawarehouse en SQL\n
          -Creaci√≥n de Dashboards en Tableau''')
    
        with col2:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>LabNL Visualizaci√≥n de Datos </p>''', unsafe_allow_html=True)
          st.write('''
          -Propuesta de valor en la administraci√≥n del agua de N.L.\n
          -Creaci√≥n de mapa para mostrar la ubicaci√≥n de las fuentes de agua de N.L. en Tableau\n
          -Dashboard con gr√°ficas, KPIs y filtros para visualizar la informaci√≥n\n
          Liga: https://wiki.labnuevoleon.mx/index.php?title=Innovaci%C3%B3n_para_Iniciativas_de_Transformaci%C3%B3n_Digital_-_Rastreo_del_Agua_de_Nuevo_Le%C3%B3n_equipo_2 ''')
    
        with col3:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Whirlpool An√°lisis de Datos </p>''', unsafe_allow_html=True)
          st.write('''
          -Limpieza y correcci√≥n de datos en SQL\n
          -An√°lisis de los datos para obtener insights\n
          -Creaci√≥n de Dashboards en Power BI ''')
    
        st.markdown('________________________')
    
        col4, col5, col6 = st.columns([1, 1,1])
    
    
        with col4:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Consultor de Neufeld </p>''', unsafe_allow_html=True)
          st.write('''
          -Propuesta para mejorar su negocio digital \n
          -Costos e ingresos para saber la rentabilidad \n
          -Desarrollo de la arquitectura, diagramas y artefactos AS IS \n
          -Desarrollo de la arquitectura, diagramas y artefactos TO BE \n''')
    
        with col5:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Consultor de Whirlpool </p>''', unsafe_allow_html=True)
          st.write('''
          -Desarrollo de la arquitectura, diagramas y artefactos AS IS\n
          -Desarrollo de la arquitectura, diagramas y artefactos TO BE\n
          -Propuesta de valor ''')
    
        with col6:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Chubb Gesti√≥n del cambio </p>''', unsafe_allow_html=True)
          st.write('''
          -Propuesta de TI\n
          -Propuesta de gesti√≥n organizacional \n
          -Desarrollo de la arquitectura, diagramas y artefactos AS IS\n
          -Desarrollo de la arquitectura, diagramas y artefactos TO BE ''')
    
        st.markdown('________________________')
    
        st.header('Experiencias')
        st.markdown('________________________')
    
        imagen1 = Image.open(r'Buenfin.jpg')
        imagen2 = Image.open(r'CISCO.jpg')
        imagen3 = Image.open(r'Chubb.jpg')
        imagen4 = Image.open(r'Linkedin.jpg')
        imagen5 = Image.open(r'NY.jpg')
        imagen6 = Image.open(r'SAP.jpg')
        imagen7 = Image.open(r'SUPSA.jpg')
        imagen8 = Image.open(r'Snowflake.jpg')
        imagen9 = Image.open(r'WHP.JPG')
        imagen10 = Image.open(r'cenmun.jpg')
        imagen11 = Image.open(r'dataton.jpg')
        imagen12 = Image.open(r'hult.jpg')
        imagen13 = Image.open(r'intercampus1.png')
        imagen14 = Image.open(r'intercampus2.jpeg')
        imagen15= Image.open(r'japon.jpg')
        imagen16 = Image.open(r'neorishack.jpg')
        imagen17 = Image.open(r'presentacionWHP.JPG')
        imagen18 = Image.open(r'satelite.jpg')
        imagen19 = Image.open(r'tecgear.jpeg')
        imagen20 = Image.open(r'titulofirma.jpg')
        imagen21 = Image.open(r'Graduaci√≥n.JPG')
    
        imagenes = {
            'Participaci√≥n Buen Fin': imagen1,
            'CISCO': imagen2,
            'Chubb': imagen3,
            'Linkedin': imagen4,
            'Nueva York': imagen5,
            'SAP': imagen6,
            'SUPSA': imagen7,
            'Snowflake': imagen8,
            'Whirlpool': imagen9,
            'CENMUN': imagen10,
            'Datathon': imagen11,
            'HultPrize': imagen12,
            'Intercampus Queretaro': imagen13,
            'Intercampus Estado de M√©xico': imagen14,
            'Japon': imagen15,
            'Neoris Hackathon': imagen16,
            'Presentaci√≥n Avances Whirlpool': imagen17,
            'Satelite': imagen18,
            'Equipo Rob√≥tica TecGear': imagen19,
            'Firma de T√≠tulo': imagen20,
            'Graduaci√≥n':imagen21
          }
    
        opciones = list(imagenes.keys())
    
    
        def mostrar_imagen(imagen):
            st.image(imagen, use_column_width=True)
    
    
        seleccion = st.selectbox('Selecciona una imagen', opciones)
        mostrar_imagen(imagenes[seleccion])
        st.markdown('________________________')
    
    
    
        st.header('Otros Proyectos')
        st.markdown('________________________')
    
        def show_pdf(x):
            with pdfplumber.open(x) as pdf:
                total_pages = len(pdf.pages)
                page_number = st.slider("Seleccione una p√°gina", 1, total_pages, 1,)
    
                selected_page = pdf.pages[page_number - 1]  # Adjusting index for zero-based indexing
                image = selected_page.to_image()
    
                # Save the PageImage as a PNG file
                with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
                    image.save(temp_file.name)
    
                # Read the temporary file back in as bytes and pass it to st.image()
                with open(temp_file.name, "rb") as file:
                    img_data = file.read()
                    st.image(img_data)
    
        st.subheader("Project manager")
        PM= show_pdf("Project manager.pdf")
        st.markdown('________________________')
    
        st.subheader("Diseno y Creacion del Expediente Medico")
        DCEM= show_pdf("Dise√±o y Creaci√≥n del Expediente M√©dico.pdf")
        st.markdown('________________________')

        st.subheader("Actividades economicas de amazon")
        DCEM= show_pdf("An√°lisis de las actividades econ√≥micas de Amazon.pdf")
        st.markdown('________________________')

        st.subheader("Ciencia de datos")
        DCEM= show_pdf("Ciencia de datos.pdf")
        st.markdown('________________________')

        st.subheader("Proyecto integrador TC1030")
        DCEM= show_pdf("Proyecto integrador TC1030.pdf")
        st.markdown('________________________')

        st.subheader("Reto iot")
        DCEM= show_pdf("Reto IoT red dom√≥tica.pdf")
        st.markdown('________________________')

        st.subheader("Soluciona un problema automotriz")
        DCEM= show_pdf("Soluciona un problema automotriz.pdf")
        st.markdown('________________________')

        
      if opt == 'Certificaciones/Reconocimientos':
        st.markdown('________________________')
    
    # Sobre Mi
    if selected == 'Sobre Mi':
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
      st.markdown('<p class="font">Sobre mi üë®üèª‚Äçüíºüíª</p>', unsafe_allow_html=True)
      st.write(f'''Bienvenidos a mi p√°gina web, yo soy Alejandro Paredes Balga√±on.''')
    
      col1, col2 = st.columns([2, 1])
    
      with col1:
        st.write(f'''
        \nSoy Ingeniero en Transformaci√≥n Digital de Negocios con una profunda pasi√≥n por el an√°lisis y la visualizaci√≥n de datos. 
        Cuento con experiencia en la transformaci√≥n y an√°lisis de datos para la toma de decisiones estrat√©gicas, as√≠ como en la 
        creaci√≥n de dashboards que han optimizado significativamente el monitoreo de KPIs y la toma de decisiones.
        Estoy en constante b√∫squeda de nuevas habilidades y tecnolog√≠as para mantenerme a la vanguardia en mi campo y 
        ofrecer soluciones innovadoras que impulsen la mejora continua y el √©xito empresarial.\n
        ''')
          
        st.write(f'''Habilidades:\n
        
        ‚ñ™Pensamiento cr√≠tico\n
        ‚ñ™Trabajo en equipo\n
        ‚ñ™Interpretaci√≥n de datos\n
        ‚ñ™Innovaci√≥n\n
        ‚ñ™Creatividad\n
        ‚ñ™Liderazgo\n
        ''')
          
        st.write(f'''Habilidades tecnol√≥gicas:\n
        
        ‚ñ™Excel\n
        ‚ñ™Google Sheets\n
        ‚ñ™SQL\n
        ‚ñ™Power BI\n
        ‚ñ™Looker Studio\n
        ‚ñ™Python\n
        ‚ñ™BigQuery\n
        ‚ñ™Sharepoint\n
        ‚ñ™Snowflake\n

        ''')
    
      with col2:
        st.image(r'Yo.jpg', use_column_width=True)
    
      st.markdown('________________________')
    
      st.markdown('<p class="font">Idiomas üåê</p>', unsafe_allow_html=True)
      st.write(f'''
      -Espa√±ol (Nativo)\n
      -Ingl√©s (Intermedio B2)\n
      -Japon√©s (Principiante A2)\n
      ''')
    
      st.markdown('________________________')
    
      st.markdown('<p class="font">Educaci√≥n üéì</p>', unsafe_allow_html=True)
      st.markdown('''<p style='font-size: 25px;'>Ingenier√≠a en Transformaci√≥n Digital de Negocios </p>''', unsafe_allow_html=True)
      st.write(f'''Promedio: 95.64 \n''')
      st.write(f'''Tecnol√≥gico de Monterrey, Campus Monterrey, Agosto 2020 - Junio 2024''')
      
      st.markdown('<p class="font">Especializaci√≥n</p>', unsafe_allow_html=True)
      st.markdown('''<p style='font-size: 25px;'>Anal√≠tica de datos y herramientas de inteligencia artificial </p>''', unsafe_allow_html=True)
      st.write(f'''Tecnol√≥gico de Monterrey, Campus Monterrey, Agosto 2023 - Diciembre 2023''')
    
      st.markdown('<p class="font">Experiencia üíº</p>', unsafe_allow_html=True)
        
      st.markdown('''<p style='font-size: 25px;'>Farmacias del Ahorro - Especialista en Datos Omnicanalidad üìä</p>''', unsafe_allow_html=True)
      st.write(f'''Agosto 2024 - Actualmente ''')
      st.write(f'''
      ‚ñ™Creaci√≥n de Dashboards en Looker \n
      ‚ñ™Obtenci√≥n de datos en BigQuery \n
      ‚ñ™Establecer promociones de campa√±as en base al an√°lisis de datos \n
      ‚ñ™Planeaci√≥n y seguimiento de campa√±as\n
      ‚ñ™Desarrollo y Optimizaci√≥n de Queries\n
      ‚ñ™Reportes de resultados de capa√±as mensual''')
      st.markdown('________________________')
        
      st.markdown('''<p style='font-size: 25px;'>Digitalent Whirlpool - Analyst D2C LARN üë®üèª‚Äçüíª</p>''', unsafe_allow_html=True)
      st.write(f'''Septiembre 2023 - Agosto 2024 ''')
      st.write(f'''
      ‚ñ™Creaci√≥n de Dashboards en Looker Studio \n
      ‚ñ™Tratamiento de datos en Python \n
      ‚ñ™Uso de APIs para obtener informaci√≥n de los sistemas transaccionales \n
      ‚ñ™An√°lisis de datos y obtenci√≥n de insights \n
      ‚ñ™Planeaci√≥n de inversi√≥n de presupuestos en Paid media LARN 2024 \n
      ‚ñ™Automatizaciones de procesos \n
      ‚ñ™Proceso de facturaci√≥n \n
      ‚ñ™Seguimiento de pagos con proveedores''')
      st.markdown('________________________')
    
      contacto_style = """<style>.contacto-section {
          background-color: black;
          padding: 20px;
          border-radius: 10px;
          color: white;
          }</style>"""
    
      st.markdown(contacto_style, unsafe_allow_html=True)
      st.markdown('<p class="font">Contactar üîî</p>', unsafe_allow_html=True)
    
      st.markdown('''
      <p class="contacto-section">
          ‚úâÔ∏è alejandroparedesbalga@gmail.com <br>
          üì± 4774057793 <br>
          üåé Monterrey, Nuevo Le√≥n
      </p>
      ''', unsafe_allow_html=True)
    
    # Reporte
    if selected == 'Reporte':
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
      st.markdown('<p class="font">Reporte üìã</p>', unsafe_allow_html=True)
    
      with st.expander("Raw Data:"):
        st.write(df)
    
      analysis = 'Equipos'
      if analysis == 'Equipos':
        colf1, colf2 = st.columns(2)
        with colf1:
          option1 = st.selectbox(
              "Equipo a Analizar", df["teamname"].unique())
          jugadorequipo = df[df["teamname"] == option1]["playername"].unique()
    
        with colf2:
          option2 = st.multiselect("Jugadores", options = jugadorequipo, default=list(jugadorequipo))
    
        filter_df = df[(df["teamname"] == option1) & (df["playername"].isin(option2))]
    
        total_seconds = filter_df["gamelength"].mean() # Obtener la duraci√≥n total en segundos
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
    
        duration_formatted = f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"  # Formatear la duraci√≥n
    
        gold = float(filter_df["totalgold"].sum())
        cs = float(filter_df["total cs"].sum())
        vision = float(filter_df["visionscore"].sum())
        kda = float(((filter_df["kills"].sum() + filter_df["assists"].sum()) / filter_df["deaths"].sum()).round(2))
        winrate = ((filter_df["result"].sum() / len(filter_df)) * 100).round(2)
    
        col1, col2, col3,col4,col5,col6 = st.columns(6)
        with col1:
            st.subheader("Duraci√≥n Promedio de Partida:")
            st.subheader(f"‚è± {duration_formatted}")
        with col2:
            st.subheader("Total Oro:")
            st.subheader(f"üí∞ {gold}")
        with col3:
            st.subheader("Total Farmeo:")
            st.subheader(f"üéØ {cs}")
        with col4:
            st.subheader("Total Visi√≥n:")
            st.subheader(f"üîÆ {vision}")
        with col5:
            st.subheader("KDA:")
            st.subheader(f"‚öîÔ∏è {kda}")
        with col6:
            st.subheader("Win Rate:")
            st.subheader(f"‚≠ê {winrate}%")
    
        st.markdown('________________________')
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          df_grouped = filter_df.groupby('side')['result'].sum().reset_index()
          max = df_grouped['result'].max()
          maxresult = df_grouped[df_grouped['result'] == max]['side'].tolist()
      
          figura,descripcion = st.columns(2)
    
        with figura:
          colores = {'Red': 'red', 'Blue': 'blue'}
          fig1 = px.pie(df_grouped, values='result', names='side', color='side',
                        color_discrete_map=colores,
                        title=f'Lado de la grieta del invocador con la que gana m√°s el equipo {option1}')
          st.write(fig1)
    
          with descripcion:
            with st.expander("Descripci√≥n:"):
              st.write(f'''
            En esta gr√°fica podemos en que lado gana m√°s el equipo. Ya que en teor√≠a,
            la orientaci√≥n del mapa, la fase de selecci√≥n de campeones y la distribuci√≥n
            de los objetivos hacen que jugar desde el lado azul haga mucho m√°s probable la
            victoria. Y en este caso el lado con m√°s tasa de victoria es: **{maxresult}** con **{max}**
            ''')
          st.markdown('________________________')
        
        oplis= ["result","kills"]
      
        option3 = st.selectbox("Metrica", options = oplis)
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          figura2,descripcion2 = st.columns(2)
          if option3 == "result":
            df_groupedchamp = filter_df.groupby('champion')['result'].sum().reset_index().sort_values(by='result', ascending=False)
            max_win = df_groupedchamp['result'].max()
            champions_with_max_win = df_groupedchamp[df_groupedchamp['result'] == max_win]['champion'].tolist()
            with figura2:
              fig2 = px.bar(df_groupedchamp, x='champion', y='result',
                            color_discrete_sequence=['skyblue'], opacity=0.8,
                            title=f'Victorias por campi√≥n para el Equipo {option1}')
              st.write(fig2)
            with descripcion2:
              st.write(f'''
            En esta gr√°fica de barras podemos ver los campeones que m√°s partidas han ganado.
            Esto podr√≠a indicarnos parte del meta (Mejores personajes del parche),
            en este caso vemos que el campe√≥n con m√°s victorias es: **{champions_with_max_win}** con **{max_win}**
            ''')
    
          if option3 == "kills":
            df_groupedchamp2 = filter_df.groupby('champion')['kills'].sum().reset_index().sort_values(by='kills', ascending=False)
            max_kills = df_groupedchamp2['kills'].max()
            champions_with_max_kills = df_groupedchamp2[df_groupedchamp2['kills'] == max_kills]['champion'].tolist()
            with figura2:
              fig3 = px.bar(df_groupedchamp2, x='champion', y='kills',
                            color_discrete_sequence=['skyblue'], opacity=0.8,
                            title=f'Jugadores abatidos usando el campe√≥n por el Equipo {option1}')
              st.write(fig3)
      
            with descripcion2:
              st.write(f'''
            En esta gr√°fica de barras podemos ver el campe√≥n que m√°s kills ha realizado.
            Esto podr√≠a indicarnos la habilidad que se tiene con el personaje,
            en este caso vemos que el campe√≥n con m√°s kills es: **{champions_with_max_kills}** con **{max_kills}** kills
            ''')
    
        st.markdown('________________________')
    
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          figura3,descripcion3= st.columns(2)
          filter_df['KDA'] = (filter_df['kills'].sum() + filter_df['assists'].sum()) / filter_df['deaths'].sum()
          df_groupedkda = filter_df.groupby('playername')['KDA'].sum().reset_index().sort_values(by='KDA', ascending=False)
          max_KDA = df_groupedkda['KDA'].max()
          player_with_max_KDA = df_groupedkda[df_groupedkda['KDA'] == max_KDA]['playername'].tolist()
      
          with figura3:
            grouped_stats = filter_df.groupby('playername').agg({
                'kills': 'sum',
                'assists': 'sum',
                'deaths': 'sum'
            }).reset_index()
      
      
            fig4 = px.line(grouped_stats, x='playername', y=['kills','assists','deaths'],
                           labels={'value': 'Cantidad', 'playername': 'Jugador'},
                           title=f'Mostrar K-D-A de los jugadores del equipo {option1}',
                           markers=True)
            st.write(fig4)
    
            with descripcion3:
              st.write(f'''
              En esta gr√°fica de lineas podemos ver tanto las muertes, las asistencias y las bajas por jugador.
              Con esto podemos ver tanto la participaci√≥n de cada uno, como quien suele morir m√°s.
              ''')
      
        st.markdown('________________________')
    
        estlist = ['dpm', 'damagetakenperminute', 'damagemitigatedperminute']
      
        # Seleccionar estad√≠sticas
        option4 = st.multiselect("Estad√≠sticas", options=estlist, default=list(estlist))
      
        # Verificar si al menos una opci√≥n est√° seleccionada
        if len(option2) < 1:
            st.warning("Debe seleccionar al menos un jugador.")
        else:
            if len(option4) < 1:
                st.warning("Debe seleccionar al menos una estad√≠stica.")
            else:
                # Agrupar y sumar las estad√≠sticas seleccionadas
                grouped_estats = filter_df.groupby('playername')[option4].sum().reset_index()
      
                # Inicializar variables para almacenar los jugadores con el m√°ximo valor en cada m√©trica
                player_with_max = {}
                max_values = {}
      
                for stat in option4:
                    max_value = grouped_estats[stat].max()
                    players = grouped_estats[grouped_estats[stat] == max_value]['playername'].tolist()
                    player_with_max[stat] = players
                    max_values[stat] = max_value
    
                # Mostrar gr√°ficos y descripciones
                fig, desc = st.columns(2)
                with fig:
                    figest = px.bar(grouped_estats, x='playername', y=option4, barmode='group',
                                    labels={'playername': 'Jugador', 'value': 'Total', 'variable': 'Estad√≠stica'},
                                    title=f'Estad√≠sticas para el Equipo {option1}')
                    st.write(figest)
                with desc:
                    descriptions = []
                    for stat in option4:
                        descriptions.append(f"**{stat}**: {', '.join(player_with_max[stat])} con **{max_values[stat]}**")
                    
                    st.write(f'''
                    En esta gr√°fica de barras podemos ver las estad√≠sticas seleccionadas 
                    por cada jugador. Esto es muy importante por el papel que tiene cada campe√≥n y que cumpla con su tarea. 
                    Los jugadores destacados en cada m√©trica son:
                    {'<br>'.join(descriptions)}
                    ''')
    
        st.markdown('________________________')
        if len(option2) < 1:
            st.warning("Debe seleccionar al menos un jugador.")
        else:
          cols,dess= st.columns(2)
          
          sun = px.sunburst(
              df,
              path=['side', 'split', 'league', 'teamname'],
              values='result',
              color='side',
              color_discrete_map={'Red': 'red', 'Blue': 'blue'},
              title=f'SunBurst'
          )
    
          # Renderizar el gr√°fico de sunburst en Streamlit
          st.plotly_chart(sun,use_container_width = True)
    
    
    # Dashboard
    if selected == 'Dashboard':
      st.header("Dashboard :bar_chart:")
    
      analysis = 'Equipos'
      
      if analysis == 'Equipos':
        colf1, colf2 = st.columns(2)
        with colf1:
          option1 = st.selectbox(
             "Equipo a Analizar", df["teamname"].unique())
          jugadorequipo = df[df["teamname"] == option1]["playername"].unique()
    
          with colf2:
            option2 = st.multiselect("Jugadores", options = jugadorequipo, default=list(jugadorequipo))
    
        filter_df = df[(df["teamname"] == option1) & (df["playername"].isin(option2))]
    
        total_seconds = filter_df["gamelength"].mean()  # Obtener la duraci√≥n total en segundos
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
    
        duration_formatted = f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"  # Formatear la duraci√≥n
    
        gold = float(filter_df["totalgold"].sum())
        cs = float(filter_df["total cs"].sum())
        vision = float(filter_df["visionscore"].sum())
        kda = float(((filter_df["kills"].sum() + filter_df["assists"].sum()) / filter_df["deaths"].sum()).round(2))
        winrate = ((filter_df["result"].sum() / len(filter_df)) * 100).round(2)
    
        col1, col2, col3,col4,col5,col6 = st.columns(6)
        with col1:
            st.subheader("Duraci√≥n Promedio de Partida:")
            st.subheader(f"‚è± {duration_formatted}")
        with col2:
            st.subheader("Total Oro:")
            st.subheader(f"üí∞ {gold}")
        with col3:
            st.subheader("Total Farmeo:")
            st.subheader(f"üéØ {cs}")
        with col4:
            st.subheader("Total Visi√≥n:")
            st.subheader(f"üîÆ {vision}")
        with col5:
            st.subheader("KDA:")
            st.subheader(f"‚öîÔ∏è {kda}")
        with col6:
            st.subheader("Win Rate:")
            st.subheader(f"‚≠ê {winrate}%")
    
        st.markdown('________________________')
    
        dash1,dash2 = st.columns(2)
        dash3,dash4= st.columns(2)
    
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          df_grouped = filter_df.groupby('side')['result'].sum().reset_index()
       
          #grafica 1
          with dash1:
            colores = {'Red': 'red', 'Blue': 'blue'}
            fig1 = px.pie(df_grouped, values='result', names='side', color='side',
                          color_discrete_map=colores,
                          title=f'Lado de la grieta del invocador con la que gana m√°s el equipo {option1}')
            st.write(fig1)
      
          df_groupedchamp = filter_df.groupby('champion')['result'].sum().reset_index().sort_values(by='result', ascending=False)
      
          with dash3:
             grouped_stats = filter_df.groupby('playername').agg({
                'kills': 'sum',
                'assists': 'sum',
                'deaths': 'sum'
                }).reset_index()
             
             fig4 = px.line(grouped_stats, x='playername', y=['kills','assists','deaths'],
                           labels={'value': 'Cantidad', 'playername': 'Jugador'},
                           title=f'Mostrar K-D-A de los jugadores del equipo {option1}',
                           markers=True)
             st.write(fig4)
          
          with dash4:
             estlist = ['dpm', 'damagetakenperminute', 'damagemitigatedperminute']
             # Agrupar y sumar las estad√≠sticas seleccionadas
             grouped_estats = filter_df.groupby('playername')[estlist].sum().reset_index()
             
             figest = px.bar(grouped_estats, x='playername', y=estlist, barmode='group',
                                    labels={'playername': 'Jugador', 'value': 'Total', 'variable': 'Estad√≠stica'},
                                    title=f'Estad√≠sticas para el Equipo {option1}')
             st.write(figest)
          
          fig2 = px.bar(df_groupedchamp, x='champion', y='result',
                      color_discrete_sequence=['skyblue'], opacity=0.8,
                      title=f'Victorias por campi√≥n para el Equipo {option1}')
          st.write(fig2)
          
          sun = px.sunburst(
            df,
            path=['side', 'split', 'league', 'teamname'],
            values='result',
            color='side',
            color_discrete_map={'Red': 'red', 'Blue': 'blue'},
            title=f'SunBurst'
          )
    
          # Renderizar el gr√°fico de sunburst en Streamlit
          dash2.plotly_chart(sun, use_container_width = True )
      
    
    
    # Feedback
    if selected == "Feedback":
        st.markdown(""" <style> .font {
        font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
        </style> """,unsafe_allow_html=True)
        st.markdown('<p class="font">Feedback üìù</p>', unsafe_allow_html=True)
    
        cursor = create_connection().cursor()
        # Consulta para obtener datos
        
        query = """
            SELECT *
            FROM feedback
        """
    
        # Ejecutar la consulta
        cursor.execute(query)
        # Obtener los nombres de las columnas
        column_names = [col[0] for col in cursor.description]
    
        # Obtener los datos
        data = cursor.fetchall()
    
        # Crear un DataFrame de pandas
        dfs = pd.DataFrame(data, columns=column_names)
    
        # Cerrar el cursor y la conexi√≥n
        cursor.close()
        create_connection().close()
    
        # Mostrar los resultados en Streamlit
        st.title('Datos desde Snowflake')
        dfs
    
        with st.form("feedback_form"):
            NOMBRE = st.text_area ("Nombre: ")
            CORREO = st.text_area ("Correo: ")
            COMENTARIO = st.text_area("Comentarios:")
            CALIFICACION = st_star_rating("Califica tu experiencia", maxValue=5, defaultValue=5, key="rating")
    
            submitted = st.form_submit_button("Enviar")
    
            if submitted:
                # Insertar feedback en Snowflake
                conn = create_connection()
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO feedback (NOMBRE, CORREO,COMENTARIO,CALIFICACION) VALUES (%s, %s,%s,%s)
                """, (NOMBRE, CORREO,COMENTARIO,CALIFICACION))
                conn.commit()
                cursor.close()
                conn.close()
                st.success("¬°Gracias por tu feedback!")
                
if sm=='English':
    selected = option_menu(None, ["About me","Portafolio" ,"Dashboard","Report", "Feedback", "References"],
        icons=["person-vcard", "folder-fill", 'pie-chart-fill','clipboard-data-fill', 'chat-square-heart-fill', 'database-fill'],
        menu_icon="cast", default_index=0, orientation="horizontal")
    
    # Referencias
    if selected == "References":
      st.markdown('<p class="font">Referencias üìë</p>', unsafe_allow_html=True)
    
      url_Streaming = "https://www.kaggle.com/datasets/barthetur/league-of-legends-2024-competitive-game-dataset/data"
      st.write(f'''For this project, I used a League of Legends databes from kagle:
      - [Conjunto de datos de Streaming]( {url_Streaming} )
      ''')
      st.markdown('________________________')
    
    # Portafolio
    if selected == "Portafolio":
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
    
      st.markdown('<p class="font">Portafolio üóÇÔ∏è</p>', unsafe_allow_html=True)
    
      st.markdown('________________________')
      opt = st.radio("Select variable",('Projects','Certifications/Recognition'))
      if opt == 'Projects':
        st.markdown('________________________')
    
        st.sidebar.markdown('''
          # Secciones
          - [Featured Projects](#featured-projects)
          - [Experiences](#experiences)
          - [Other Projects](#other-projects)
            - [Proyect manager](#proyect-manager)
            - [Diseno y Creacion del Expediente Medico](#diseno-y-creacion-del-expediente-medico)
          ''', unsafe_allow_html=True)
    
        st.header('Featured Projects')
        st.markdown('________________________')
    
        col1, col2, col3 = st.columns([1, 1,1])
    
    
        with col1:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Data Analysis for Tecstore </p>''', unsafe_allow_html=True)
          st.write('''
          -Design and creation of Datawarehouse in SQL \n
          -ETL process in SQL \n
          -Dashboard creation in Tableau''')
    
        with col2:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Data Visualization for LabNL </p>''', unsafe_allow_html=True)
          st.write('''
          -Value Proposal in Water Management\n
          -Creation of the Water Map to show the location of the different water sources in Tableau\n
          -Creation of a Dashboard with graphics, KPIs, and filters using water source data in Tableau\n
          Link: https://wiki.labnuevoleon.mx/index.php?title=Innovaci%C3%B3n_para_Iniciativas_de_Transformaci%C3%B3n_Digital_-_Rastreo_del_Agua_de_Nuevo_Le%C3%B3n_equipo_2 ''')
    
        with col3:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Data Analysis for Whirlpool </p>''', unsafe_allow_html=True)
          st.write('''
          -ETL process in SQL\n
          -Data Analysis to obtain insights\n
          -Creation of a Dashboard in PowerBI ''')
    
        st.markdown('________________________')
    
        col4, col5, col6 = st.columns([1, 1,1])
    
    
        with col4:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Consultor de Neufeld </p>''', unsafe_allow_html=True)
          st.write('''
          -Proposal to improve your digital business \n
          -Cost and revenue to determine profitability \n
          -Development of the architecture, diagrams, and AS IS artifacts \n
          -Development of the architecture, diagrams, and TO BE artifacts \n''')
    
        with col5:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Consultor de Whirlpool </p>''', unsafe_allow_html=True)
          st.write('''
          -Development of the architecture, diagrams, and AS IS artifacts\n
          -Development of the architecture, diagrams, and TO BE artifacts\n
          -Value Proposal ''')
    
        with col6:
          st.markdown('''<p style='font-size: 25px; color: #008000;'>Chubb Gesti√≥n del cambio </p>''', unsafe_allow_html=True)
          st.write('''
          -IT Proposal\n
          -Proposal for organizational management \n
          -Development of the architecture, diagrams, and AS IS artifacts\n
          -Development of the architecture, diagrams, and TO BE artifacts ''')
    
        st.markdown('________________________')
    
        st.header('Experiences')
        st.markdown('________________________')
    
        imagen1 = Image.open(r'Buenfin.jpg')
        imagen2 = Image.open(r'CISCO.jpg')
        imagen3 = Image.open(r'Chubb.jpg')
        imagen4 = Image.open(r'Linkedin.jpg')
        imagen5 = Image.open(r'NY.jpg')
        imagen6 = Image.open(r'SAP.jpg')
        imagen7 = Image.open(r'SUPSA.jpg')
        imagen8 = Image.open(r'Snowflake.jpg')
        imagen9 = Image.open(r'WHP.JPG')
        imagen10 = Image.open(r'cenmun.jpg')
        imagen11 = Image.open(r'dataton.jpg')
        imagen12 = Image.open(r'hult.jpg')
        imagen13 = Image.open(r'intercampus1.png')
        imagen14 = Image.open(r'intercampus2.jpeg')
        imagen15= Image.open(r'japon.jpg')
        imagen16 = Image.open(r'neorishack.jpg')
        imagen17 = Image.open(r'presentacionWHP.JPG')
        imagen18 = Image.open(r'satelite.jpg')
        imagen19 = Image.open(r'tecgear.jpeg')
        imagen20 = Image.open(r'titulofirma.jpg')
        imagen21 = Image.open(r'Graduaci√≥n.JPG')
    
        imagenes = {
            'Participaci√≥n Buen Fin': imagen1,
            'CISCO': imagen2,
            'Chubb': imagen3,
            'Linkedin': imagen4,
            'Nueva York': imagen5,
            'SAP': imagen6,
            'SUPSA': imagen7,
            'Snowflake': imagen8,
            'Whirlpool': imagen9,
            'CENMUN': imagen10,
            'Datathon': imagen11,
            'HultPrize': imagen12,
            'Intercampus Queretaro': imagen13,
            'Intercampus Estado de M√©xico': imagen14,
            'Japon': imagen15,
            'Neoris Hackathon': imagen16,
            'Presentation Avances Whirlpool': imagen17,
            'Satellite': imagen18,
            'Robotic team TecGear': imagen19,
            'University diplome signature': imagen20,
            'Graduaci√≥n': imagen21
          }
    
        opciones = list(imagenes.keys())
    
    
        def mostrar_imagen(imagen):
            st.image(imagen, use_column_width=True)
    
    
        seleccion = st.selectbox('Select an image', opciones)
        mostrar_imagen(imagenes[seleccion])
        st.markdown('________________________')
    
    
    
        st.header('Other Projects')
        st.markdown('________________________')
    
        def show_pdf(x):
            with pdfplumber.open(x) as pdf:
                total_pages = len(pdf.pages)
                page_number = st.slider("Select a page", 1, total_pages, 1,)
    
                selected_page = pdf.pages[page_number - 1]  # Adjusting index for zero-based indexing
                image = selected_page.to_image()
    
                # Save the PageImage as a PNG file
                with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
                    image.save(temp_file.name)
    
                # Read the temporary file back in as bytes and pass it to st.image()
                with open(temp_file.name, "rb") as file:
                    img_data = file.read()
                    st.image(img_data)
    
        st.subheader("Project manager")
        PM= show_pdf("Project manager.pdf")
        st.markdown('________________________')
    
        st.subheader("Diseno y Creacion del Expediente Medico")
        DCEM= show_pdf("Dise√±o y Creaci√≥n del Expediente M√©dico.pdf")
        st.markdown('________________________')
      if opt == 'Certifications/Recognition':
        st.markdown('________________________')
    
    # About me
    if selected == 'About me':
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
      st.markdown('<p class="font">Sobre mi üë®üèª‚Äçüíºüíª</p>', unsafe_allow_html=True)
      st.write(f'''Welcome to my web page, I am Alejandro Paredes Balga√±on.''')
    
      col1, col2 = st.columns([2, 1])
    
      with col1:
        st.write(f'''
        \nI am a Digital Business Transformation Engineer with a deep passion for data analysis 
        and visualization. I have experience in data transformation and analysis for strategic 
        decision-making, as well as in creating dashboards that have significantly optimized KPI 
        monitoring and decision-making. I am constantly seeking new skills and technologies to stay 
        at the forefront of my field and provide innovative solutions that drive continuous improvement 
        and business success. \n
    
        \nSkills:\n
        
        ‚ñ™Critical Thinking\n
        ‚ñ™TeamWork\n
        ‚ñ™Data Interpretation\n
        ‚ñ™Innovation\n
        ‚ñ™Creativity\n
        ‚ñ™Leadership\n
    
        \nIT Skills:\n
        
        ‚ñ™Excel\n
        ‚ñ™Google Sheets\n
        ‚ñ™SQL\n
        ‚ñ™Power BI\n
        ‚ñ™Looker Studio\n
        ‚ñ™Python\n
        ‚ñ™BigQuery\n
        ‚ñ™Sharepoint\n
        ‚ñ™Snowflake\n
        ''')
    
      with col2:
        st.image(r'Yo.jpg', use_column_width=True)
    
      st.markdown('________________________')
    
      st.markdown('<p class="font">Languages üåê</p>', unsafe_allow_html=True)
      st.write(f'''
      -Spanish (Native)\n
      -English (Intermediate B2)\n
      -Japanese (Beginner A2)\n
      ''')
    
      st.markdown('________________________')
    
      st.markdown('<p class="font">Education üéì</p>', unsafe_allow_html=True)
      st.markdown('''<p style='font-size: 25px;'>Digital Business Transformation Engineering </p>''', unsafe_allow_html=True)
      st.write(f'''Grade point average: 95.64 \n''')
      st.write(f'''Tecnol√≥gico de Monterrey, Campus Monterrey, August 2020 - June 2024''')
    
      st.markdown('<p class="font">Experience üíº</p>', unsafe_allow_html=True)
      st.markdown('''<p style='font-size: 25px;'>Digitalent Whirlpool - Analyst D2C LARN üë®üèª‚Äçüíª</p>''', unsafe_allow_html=True)
      st.write(f'''September 2023 - August 2024 ''')
      st.write(f'''
      ‚ñ™Creaci√≥n de Dashboards en Looker Studio \n
      ‚ñ™Tratamiento de datos en Python \n
      ‚ñ™Uso de APIs para obtener informaci√≥n de los sistemas transaccionales \n
      ‚ñ™An√°lisis de datos y obtenci√≥n de insights \n
      ‚ñ™Planeaci√≥n de inversi√≥n de presupuestos en Paid media LARN 2024 \n
      ‚ñ™Automatizaciones de procesos \n
      ‚ñ™Proceso de facturaci√≥n \n
      ‚ñ™Seguimiento de pagos con proveedores''')
      st.markdown('________________________')
    
      contacto_style = """<style>.contacto-section {
          background-color: black;
          padding: 20px;
          border-radius: 10px;
          color: white;
          }</style>"""
    
      st.markdown(contacto_style, unsafe_allow_html=True)
      st.markdown('<p class="font">Contactar üîî</p>', unsafe_allow_html=True)
    
      st.markdown('''
      <p class="contacto-section">
          ‚úâÔ∏è alejandroparedesbalga@gmail.com <br>
          üì± 4774057793 <br>
          üåé Monterrey, Nuevo Le√≥n
      </p>
      ''', unsafe_allow_html=True)
    
    # Reporte
    if selected == 'Reporte':
      st.markdown(""" <style> .font {
      font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
      </style> """,unsafe_allow_html=True)
      st.markdown('<p class="font">Reporte üìã</p>', unsafe_allow_html=True)
    
      with st.expander("Raw Data:"):
        st.write(df)
    
      analysis = st.radio("Selecciona Analisis",('Equipos','Comparar'))
      if analysis == 'Equipos':
        colf1, colf2 = st.columns(2)
        with colf1:
          option1 = st.selectbox(
              "Equipo a Analizar", df["teamname"].unique())
          jugadorequipo = df[df["teamname"] == option1]["playername"].unique()
    
        with colf2:
          option2 = st.multiselect("Jugadores", options = jugadorequipo, default=list(jugadorequipo))
    
        filter_df = df[(df["teamname"] == option1) & (df["playername"].isin(option2))]
    
        total_seconds = filter_df["gamelength"].sum()  # Obtener la duraci√≥n total en segundos
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
    
        duration_formatted = f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"  # Formatear la duraci√≥n
    
        gold = float(filter_df["totalgold"].sum())
        cs = float(filter_df["total cs"].sum())
        vision = float(filter_df["visionscore"].sum())
        kda = float(((filter_df["kills"].sum() + filter_df["assists"].sum()) / filter_df["deaths"].sum()).round(2))
        winrate = ((filter_df["result"].sum() / len(filter_df)) * 100).round(2)
    
        col1, col2, col3,col4,col5,col6 = st.columns(6)
        with col1:
            st.subheader("Total Duraci√≥n:")
            st.subheader(f"‚è± {duration_formatted}")
        with col2:
            st.subheader("Total Oro:")
            st.subheader(f"üí∞ {gold}")
        with col3:
            st.subheader("Total Farmeo:")
            st.subheader(f"üéØ {cs}")
        with col4:
            st.subheader("Total Visi√≥n:")
            st.subheader(f"üîÆ {vision}")
        with col5:
            st.subheader("KDA:")
            st.subheader(f"‚öîÔ∏è {kda}")
        with col6:
            st.subheader("Win Rate:")
            st.subheader(f"‚≠ê {winrate}%")
    
        st.markdown('________________________')
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          df_grouped = filter_df.groupby('side')['result'].sum().reset_index()
          max = df_grouped['result'].max()
          maxresult = df_grouped[df_grouped['result'] == max]['side'].tolist()
      
          figura,descripcion = st.columns(2)
    
        with figura:
          colores = {'Red': 'red', 'Blue': 'blue'}
          fig1 = px.pie(df_grouped, values='result', names='side', color='side',
                        color_discrete_map=colores,
                        title=f'Lado de la grieta del invocador con la que gana m√°s el equipo {option1}')
          st.write(fig1)
    
          with descripcion:
            with st.expander("Descripci√≥n:"):
              st.write(f'''
            En esta gr√°fica podemos en que lado gana m√°s el equipo. Ya que en teor√≠a,
            la orientaci√≥n del mapa, la fase de selecci√≥n de campeones y la distribuci√≥n
            de los objetivos hacen que jugar desde el lado azul haga mucho m√°s probable la
            victoria. Y en este caso el lado con m√°s tasa de victoria es: **{maxresult}** con **{max}**
            ''')
          st.markdown('________________________')
        
        oplis= ["result","kills"]
      
        option3 = st.selectbox("Metrica", options = oplis)
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          figura2,descripcion2 = st.columns(2)
          if option3 == "result":
            df_groupedchamp = filter_df.groupby('champion')['result'].sum().reset_index().sort_values(by='result', ascending=False)
            max_win = df_groupedchamp['result'].max()
            champions_with_max_win = df_groupedchamp[df_groupedchamp['result'] == max_win]['champion'].tolist()
            with figura2:
              fig2 = px.bar(df_groupedchamp, x='champion', y='result',
                            color_discrete_sequence=['skyblue'], opacity=0.8,
                            title=f'Victorias por campi√≥n para el Equipo {option1}')
              st.write(fig2)
            with descripcion2:
              st.write(f'''
            En esta gr√°fica de barras podemos ver los campeones que m√°s partidas han ganado.
            Esto podr√≠a indicarnos parte del meta (Mejores personajes del parche),
            en este caso vemos que el campe√≥n con m√°s victorias es: **{champions_with_max_win}** con **{max_win}**
            ''')
    
          if option3 == "kills":
            df_groupedchamp2 = filter_df.groupby('champion')['kills'].sum().reset_index().sort_values(by='kills', ascending=False)
            max_kills = df_groupedchamp2['kills'].max()
            champions_with_max_kills = df_groupedchamp2[df_groupedchamp2['kills'] == max_kills]['champion'].tolist()
            with figura2:
              fig3 = px.bar(df_groupedchamp2, x='champion', y='kills',
                            color_discrete_sequence=['skyblue'], opacity=0.8,
                            title=f'Jugadores abatidos usando el campe√≥n por el Equipo {option1}')
              st.write(fig3)
      
            with descripcion2:
              st.write(f'''
            En esta gr√°fica de barras podemos ver el campe√≥n que m√°s kills ha realizado.
            Esto podr√≠a indicarnos la habilidad que se tiene con el personaje,
            en este caso vemos que el campe√≥n con m√°s kills es: **{champions_with_max_kills}** con **{max_kills}** kills
            ''')
    
        st.markdown('________________________')
    
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          figura3,descripcion3= st.columns(2)
          filter_df['KDA'] = (filter_df['kills'].sum() + filter_df['assists'].sum()) / filter_df['deaths'].sum()
          df_groupedkda = filter_df.groupby('playername')['KDA'].sum().reset_index().sort_values(by='KDA', ascending=False)
          max_KDA = df_groupedkda['KDA'].max()
          player_with_max_KDA = df_groupedkda[df_groupedkda['KDA'] == max_KDA]['playername'].tolist()
      
          with figura3:
            grouped_stats = filter_df.groupby('playername').agg({
                'kills': 'sum',
                'assists': 'sum',
                'deaths': 'sum'
            }).reset_index()
      
      
            fig4 = px.line(grouped_stats, x='playername', y=['kills','assists','deaths'],
                           labels={'value': 'Cantidad', 'playername': 'Jugador'},
                           title=f'Mostrar K-D-A de los jugadores del equipo {option1}',
                           markers=True)
            st.write(fig4)
    
            with descripcion3:
              st.write(f'''
              En esta gr√°fica de lineas podemos ver tanto las muertes, las asistencias y las bajas por jugador.
              Con esto podemos ver tanto la participaci√≥n de cada uno, como quien suele morir m√°s.
              ''')
      
        st.markdown('________________________')
    
        estlist = ['dpm', 'damagetakenperminute', 'damagemitigatedperminute']
      
        # Seleccionar estad√≠sticas
        option4 = st.multiselect("Estad√≠sticas", options=estlist, default=list(estlist))
      
        # Verificar si al menos una opci√≥n est√° seleccionada
        if len(option2) < 1:
            st.warning("Debe seleccionar al menos un jugador.")
        else:
            if len(option4) < 1:
                st.warning("Debe seleccionar al menos una estad√≠stica.")
            else:
                # Agrupar y sumar las estad√≠sticas seleccionadas
                grouped_estats = filter_df.groupby('playername')[option4].sum().reset_index()
      
                # Inicializar variables para almacenar los jugadores con el m√°ximo valor en cada m√©trica
                player_with_max = {}
                max_values = {}
      
                for stat in option4:
                    max_value = grouped_estats[stat].max()
                    players = grouped_estats[grouped_estats[stat] == max_value]['playername'].tolist()
                    player_with_max[stat] = players
                    max_values[stat] = max_value
    
                # Mostrar gr√°ficos y descripciones
                fig, desc = st.columns(2)
                with fig:
                    figest = px.bar(grouped_estats, x='playername', y=option4, barmode='group',
                                    labels={'playername': 'Jugador', 'value': 'Total', 'variable': 'Estad√≠stica'},
                                    title=f'Estad√≠sticas para el Equipo {option1}')
                    st.write(figest)
                with desc:
                    descriptions = []
                    for stat in option4:
                        descriptions.append(f"**{stat}**: {', '.join(player_with_max[stat])} con **{max_values[stat]}**")
                    
                    st.write(f'''
                    En esta gr√°fica de barras podemos ver las estad√≠sticas seleccionadas 
                    por cada jugador. Esto es muy importante por el papel que tiene cada campe√≥n y que cumpla con su tarea. 
                    Los jugadores destacados en cada m√©trica son:
                    {'<br>'.join(descriptions)}
                    ''')
    
        st.markdown('________________________')
        if len(option2) < 1:
            st.warning("Debe seleccionar al menos un jugador.")
        else:
          cols,dess= st.columns(2)
          
          sun = px.sunburst(
              df,
              path=['side', 'split', 'league', 'teamname'],
              values='result',
              color='side',
              color_discrete_map={'Red': 'red', 'Blue': 'blue'},
              title=f'SunBurst'
          )
    
          # Renderizar el gr√°fico de sunburst en Streamlit
          st.plotly_chart(sun,use_container_width = True)
    
    
    # Dashboard
    if selected == 'Dashboard':
      st.header("Dashboard :bar_chart:")
    
      analysis = st.radio("Selecciona Analisis",('Equipos','Comparar'))
      
      if analysis == 'Equipos':
        colf1, colf2 = st.columns(2)
        with colf1:
          option1 = st.selectbox(
             "Equipo a Analizar", df["teamname"].unique())
          jugadorequipo = df[df["teamname"] == option1]["playername"].unique()
    
          with colf2:
            option2 = st.multiselect("Jugadores", options = jugadorequipo, default=list(jugadorequipo))
    
        filter_df = df[(df["teamname"] == option1) & (df["playername"].isin(option2))]
    
        total_seconds = filter_df["gamelength"].sum()  # Obtener la duraci√≥n total en segundos
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
    
        duration_formatted = f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"  # Formatear la duraci√≥n
    
        gold = float(filter_df["totalgold"].sum())
        cs = float(filter_df["total cs"].sum())
        vision = float(filter_df["visionscore"].sum())
        kda = float(((filter_df["kills"].sum() + filter_df["assists"].sum()) / filter_df["deaths"].sum()).round(2))
        winrate = ((filter_df["result"].sum() / len(filter_df)) * 100).round(2)
    
        col1, col2, col3,col4,col5,col6 = st.columns(6)
        with col1:
            st.subheader("Total Duraci√≥n:")
            st.subheader(f"‚è± {duration_formatted}")
        with col2:
            st.subheader("Total Oro:")
            st.subheader(f"üí∞ {gold}")
        with col3:
            st.subheader("Total Farmeo:")
            st.subheader(f"üéØ {cs}")
        with col4:
            st.subheader("Total Visi√≥n:")
            st.subheader(f"üîÆ {vision}")
        with col5:
            st.subheader("KDA:")
            st.subheader(f"‚öîÔ∏è {kda}")
        with col6:
            st.subheader("Win Rate:")
            st.subheader(f"‚≠ê {winrate}%")
    
        st.markdown('________________________')
    
        dash1,dash2 = st.columns(2)
        dash3,dash4= st.columns(2)
    
        if len(option2) <1:
          st.write("No hay jugadores seleccionados")
        else:
          df_grouped = filter_df.groupby('side')['result'].sum().reset_index()
       
          #grafica 1
          with dash1:
            colores = {'Red': 'red', 'Blue': 'blue'}
            fig1 = px.pie(df_grouped, values='result', names='side', color='side',
                          color_discrete_map=colores,
                          title=f'Lado de la grieta del invocador con la que gana m√°s el equipo {option1}')
            st.write(fig1)
      
          df_groupedchamp = filter_df.groupby('champion')['result'].sum().reset_index().sort_values(by='result', ascending=False)
      
          with dash3:
             grouped_stats = filter_df.groupby('playername').agg({
                'kills': 'sum',
                'assists': 'sum',
                'deaths': 'sum'
                }).reset_index()
             
             fig4 = px.line(grouped_stats, x='playername', y=['kills','assists','deaths'],
                           labels={'value': 'Cantidad', 'playername': 'Jugador'},
                           title=f'Mostrar K-D-A de los jugadores del equipo {option1}',
                           markers=True)
             st.write(fig4)
          
          with dash4:
             estlist = ['dpm', 'damagetakenperminute', 'damagemitigatedperminute']
             # Agrupar y sumar las estad√≠sticas seleccionadas
             grouped_estats = filter_df.groupby('playername')[estlist].sum().reset_index()
             
             figest = px.bar(grouped_estats, x='playername', y=estlist, barmode='group',
                                    labels={'playername': 'Jugador', 'value': 'Total', 'variable': 'Estad√≠stica'},
                                    title=f'Estad√≠sticas para el Equipo {option1}')
             st.write(figest)
          
          fig2 = px.bar(df_groupedchamp, x='champion', y='result',
                      color_discrete_sequence=['skyblue'], opacity=0.8,
                      title=f'Victorias por campi√≥n para el Equipo {option1}')
          st.write(fig2)
          
          sun = px.sunburst(
            df,
            path=['side', 'split', 'league', 'teamname'],
            values='result',
            color='side',
            color_discrete_map={'Red': 'red', 'Blue': 'blue'},
            title=f'SunBurst'
          )
    
          # Renderizar el gr√°fico de sunburst en Streamlit
          dash2.plotly_chart(sun, use_container_width = True )
      
    
    
    # Feedback
    if selected == "Feedback":
        st.markdown(""" <style> .font {
        font-size:35px ; font-family: 'Cooper Black'; color: #003399;}
        </style> """,unsafe_allow_html=True)
        st.markdown('<p class="font">Feedback üìù</p>', unsafe_allow_html=True)
    
        cursor = create_connection().cursor()
        # Consulta para obtener datos
        
        query = """
            SELECT *
            FROM feedback
        """
    
        # Ejecutar la consulta
        cursor.execute(query)
        # Obtener los nombres de las columnas
        column_names = [col[0] for col in cursor.description]
    
        # Obtener los datos
        data = cursor.fetchall()
    
        # Crear un DataFrame de pandas
        dfs = pd.DataFrame(data, columns=column_names)
    
        # Cerrar el cursor y la conexi√≥n
        cursor.close()
        create_connection().close()
    
        # Mostrar los resultados en Streamlit
        st.title('Datos desde Snowflake')
        dfs
    
        with st.form("feedback_form"):
            NOMBRE = st.text_area ("Nombre: ")
            CORREO = st.text_area ("Correo: ")
            COMENTARIO = st.text_area("Comentarios:")
            CALIFICACION = st_star_rating("Califica tu experiencia", maxValue=5, defaultValue=5, key="rating")
    
            submitted = st.form_submit_button("Enviar")
    
            if submitted:
                # Insertar feedback en Snowflake
                conn = create_connection()
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO feedback (NOMBRE, CORREO,COMENTARIO,CALIFICACION) VALUES (%s, %s,%s,%s)
                """, (NOMBRE, CORREO,COMENTARIO,CALIFICACION))
                conn.commit()
                cursor.close()
                conn.close()
                st.success("¬°Gracias por tu feedback!")
    
